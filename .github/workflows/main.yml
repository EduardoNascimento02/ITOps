name: senai_automacao
run-name: ${{ github.actor }} Pipeline Deploy ðŸš€
on: 
  push:
    branches:
      - "main"
    paths-ignore:
      - "docs/**"
      - "images/**"
      - "*.md"
      - "*.dockerignore"
jobs:
  githubactions-senai:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: INSTALL PACKAGES
        run: |
          sudo apt update -y
          sudo apt-get install figlet -y
          curl https://static.snyk.io/cli/latest/snyk-linux -o snyk
          chmod +x ./snyk
          mv ./snyk /usr/local/bin/
            
      - name: Snyk Auth
        run: |
          snyk -d auth $SNYK_TOKEN
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_AUTH_TOKEN }}
          
      - name: Configurar AWS CLI
        if: always()
        run: |
          echo "AWS CLI" | figlet -f small
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region us-east-1
          export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
          export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
          export AWS_DEFAULT_REGION="us-east-1"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: DockerLint (CI)
        run: |
          echo "DOCKERLINT" | figlet -f small
          docker run --rm -i hadolint/hadolint < Dockerfile || true
      
      - name: Docker Login
        if: always()
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Docker build (CI)
        if: always()
        run: |
          echo $AWS_ACCESS_KEY_ID
          docker build --build-arg AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID --build-arg AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY --build-arg AWS_DEFAULT_REGION="us-east-1" -t apicontainer .
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          
      - name: Docker Analysis (CI)
        if: always()
        run: |
          echo "VULNERABILIDADES" | figlet -c -f small
          snyk container test apicontainer:latest || true
          
      - name: Docker Push (CD)
        if: always()
        run: |
          COMMIT_SHA=$(echo $GITHUB_SHA | cut -c 1-5)
          echo $COMMIT_SHA

          docker tag apicontainer:latest eddydox/apicontainer:$COMMIT_SHA
          docker push eddydox/apicontainer:$COMMIT_SHA



      - name: Create EC2 Instance
        if: always()
        run: |
          echo "Creating EC2 Instance" | figlet -f small
          # Install Terraform
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list > /dev/null
          sudo apt-get update && sudo apt-get install terraform -y

          # Initialize Terraform
          terraform init -backend=false

          echo 'provider "aws" {' > main.tf
          echo '  region = "us-west-2"' >> main.tf
          echo '}' >> main.tf
          echo 'resource "aws_instance" "example" {' >> main.tf
          echo '  ami           = "ami-0c94855ba95c574c8"' >> main.tf
          echo '  instance_type = "t2.micro"' >> main.tf
          echo '  user_data     = <<EOF' >> main.tf
          echo '    #!/bin/bash' >> main.tf
          echo '    # Install Docker' >> main.tf
          echo '    sudo apt-get update' >> main.tf
          echo '    sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common' >> main.tf
          echo '    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -' >> main.tf
          echo '    sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"' >> main.tf
          echo '    sudo apt-get update' >> main.tf
          echo '    sudo apt-get install -y docker-ce' >> main.tf
          echo '    sudo usermod -aG docker $USER' >> main.tf
          echo '    sudo systemctl enable docker' >> main.tf
          echo '    sudo systemctl start docker' >> main.tf
          echo '    # Pull and run the Docker image' >> main.tf
          echo '    sudo docker pull eddydox/apicontainer:$COMMIT_SHA' >> main.tf
          echo '    sudo docker run -d -p 8080:8080 eddydox/apicontainer:$COMMIT_SHA' >> main.tf
          echo '  EOF' >> main.tf
          echo '  tags = {' >> main.tf
          echo '    Name = "ExampleInstance"' >> main.tf
          echo '  }' >> main.tf
          echo '}' >> main.tf
          
          # Apply Terraform configuration
          terraform apply -auto-approve