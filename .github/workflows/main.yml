name: senai_automacao
run-name: ${{ github.actor }} Pipeline Deploy ðŸš€
on: 
  push:
    branches:
      - "main"
    paths-ignore:
      - "docs/**"
      - "images/**"
      - "*.md"
      - "*.dockerignore"
jobs:
  githubactions-senai:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: INSTALL PACKAGES
        run: |
          sudo apt update -y
          sudo apt-get install figlet -y
          curl https://static.snyk.io/cli/latest/snyk-linux -o snyk
          chmod +x ./snyk
          mv ./snyk /usr/local/bin/
            
      - name: Snyk Auth
        run: |
          snyk -d auth $SNYK_TOKEN
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_AUTH_TOKEN }}
          
      - name: Configurar AWS CLI
        if: always()
        run: |
          echo "AWS CLI" | figlet -f small
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region us-east-1
          export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
          export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
          export AWS_DEFAULT_REGION="us-east-1"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: DockerLint (CI)
        run: |
          echo "DOCKERLINT" | figlet -f small
          docker run --rm -i hadolint/hadolint < Dockerfile || true
      
      - name: Docker Login
        if: always()
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Docker build (CI)
        if: always()
        run: |
          echo $AWS_ACCESS_KEY_ID
          docker build --build-arg AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID --build-arg AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY --build-arg AWS_DEFAULT_REGION="us-east-1" -t apicontainer .
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          
      - name: Docker Analysis (CI)
        if: always()
        run: |
          echo "VULNERABILIDADES" | figlet -c -f small
          snyk container test apicontainer:latest || true
          
      - name: Docker Push (CD)
        if: always()
        run: |
          COMMIT_SHA=$(echo $GITHUB_SHA | cut -c 1-5)
          echo $COMMIT_SHA

          docker tag apicontainer:latest <substituir_aqui>/apicontainer:$COMMIT_SHA
          docker push <substituir_aqui>/apicontainer:$COMMIT_SHA


      - name: Create EC2 Instance
        if: always()
        run: |
          echo "Creating EC2 Instance" | figlet -f small
          # Install Terraform
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list > /dev/null
          sudo apt-get update && sudo apt-get install terraform -y

          # Initialize Terraform
          terraform init

          # Apply Terraform configuration
          terraform apply -auto-approve

      - name: Configure EC2 Instance
        if: always()
        run: |
          echo "Configuring EC2 Instance" | figlet -f small
          ssh-keygen -t rsa -N "" -f ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts
          ssh -i ~/.ssh/id_rsa ubuntu@${{ env.EC2_PUBLIC_IP }} "sudo apt-get update && sudo apt-get install docker.io -y && sudo usermod -aG docker ubuntu"

      - name: Download Docker Image
        if: always()
        run: |
          echo "Downloading Docker Image" | figlet -f small
          ssh -i ~/.ssh/id_rsa ubuntu@${{ env.EC2_PUBLIC_IP }} "docker pull eddydoc/apicontainer:${{ env.COMMIT_SHA }}"

      - name: Run Docker Container
